"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.app = void 0;

var _logger = require("./commons/util/logger");

var _httpErrors = _interopRequireDefault(require("http-errors"));

var _express = _interopRequireDefault(require("express"));

var _expressSession = _interopRequireDefault(require("express-session"));

var _connectRedis = _interopRequireDefault(require("connect-redis"));

var _path = _interopRequireDefault(require("path"));

var _cookieParser = _interopRequireDefault(require("cookie-parser"));

var _morgan = _interopRequireDefault(require("morgan"));

var _redisClient = require("./drivers/redis/redisClient");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const RedisStore = (0, _connectRedis.default)(_expressSession.default);

const config = require('config');

const p = (0, _logger.logD)(__filename),
      app = (0, _express.default)(); // view engine setup

exports.app = app;
app.set('views', _path.default.join(__dirname, 'views'));
app.set('view engine', 'ejs'); // plugins

app.use((0, _morgan.default)('dev'));
app.use(_express.default.json());
app.use(_express.default.urlencoded({
  extended: false
}));
app.use((0, _cookieParser.default)());
app.use(_express.default.static(_path.default.join(__dirname, 'public')));
app.use((0, _expressSession.default)({
  secret: 'secretkey',
  store: new RedisStore({
    host: config.redis.host,
    port: config.redis.port,
    client: (0, _redisClient.getClient)({
      host: config.redis.host,
      port: config.redis.port
    }),
    prefix: 'sid:',
    ttl: 1800
  }),
  saveUninitialized: true,
  resave: false
})); // routing

app.use('/', require('./routes/index'));
app.use('/user', require('./routes/user'));
app.use('/chatroom', require('./routes/chatroom')); // catch 404 and forward to error handler

app.use(function (req, res, next) {
  next((0, _httpErrors.default)(404));
}); // error handler

app.use(function (err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {}; // render the error page

  res.status(err.status || 500);
  res.render('error');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAudHMiXSwibmFtZXMiOlsiUmVkaXNTdG9yZSIsInNlc3Npb24iLCJjb25maWciLCJyZXF1aXJlIiwicCIsIl9fZmlsZW5hbWUiLCJhcHAiLCJzZXQiLCJwYXRoIiwiam9pbiIsIl9fZGlybmFtZSIsInVzZSIsImV4cHJlc3MiLCJqc29uIiwidXJsZW5jb2RlZCIsImV4dGVuZGVkIiwic3RhdGljIiwic2VjcmV0Iiwic3RvcmUiLCJob3N0IiwicmVkaXMiLCJwb3J0IiwiY2xpZW50IiwicHJlZml4IiwidHRsIiwic2F2ZVVuaW5pdGlhbGl6ZWQiLCJyZXNhdmUiLCJyZXEiLCJyZXMiLCJuZXh0IiwiZXJyIiwibG9jYWxzIiwibWVzc2FnZSIsImVycm9yIiwiZ2V0Iiwic3RhdHVzIiwicmVuZGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7Ozs7QUFDQSxNQUFNQSxVQUFVLEdBQUcsMkJBQWFDLHVCQUFiLENBQW5COztBQUNBLE1BQU1DLE1BQU0sR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBdEI7O0FBQ0EsTUFBTUMsQ0FBQyxHQUFHLGtCQUFLQyxVQUFMLENBQVY7QUFBQSxNQUNFQyxHQUFHLEdBQUcsdUJBRFIsQyxDQUdBOzs7QUFDQUEsR0FBRyxDQUFDQyxHQUFKLENBQVEsT0FBUixFQUFpQkMsY0FBS0MsSUFBTCxDQUFVQyxTQUFWLEVBQXFCLE9BQXJCLENBQWpCO0FBQ0FKLEdBQUcsQ0FBQ0MsR0FBSixDQUFRLGFBQVIsRUFBdUIsS0FBdkIsRSxDQUVBOztBQUNBRCxHQUFHLENBQUNLLEdBQUosQ0FBUSxxQkFBTyxLQUFQLENBQVI7QUFDQUwsR0FBRyxDQUFDSyxHQUFKLENBQVFDLGlCQUFRQyxJQUFSLEVBQVI7QUFDQVAsR0FBRyxDQUFDSyxHQUFKLENBQVFDLGlCQUFRRSxVQUFSLENBQW1CO0FBQUVDLEVBQUFBLFFBQVEsRUFBRTtBQUFaLENBQW5CLENBQVI7QUFDQVQsR0FBRyxDQUFDSyxHQUFKLENBQVEsNEJBQVI7QUFDQUwsR0FBRyxDQUFDSyxHQUFKLENBQVFDLGlCQUFRSSxNQUFSLENBQWVSLGNBQUtDLElBQUwsQ0FBVUMsU0FBVixFQUFxQixRQUFyQixDQUFmLENBQVI7QUFDQUosR0FBRyxDQUFDSyxHQUFKLENBQ0UsNkJBQVE7QUFDTk0sRUFBQUEsTUFBTSxFQUFFLFdBREY7QUFFTkMsRUFBQUEsS0FBSyxFQUFFLElBQUlsQixVQUFKLENBQWU7QUFDcEJtQixJQUFBQSxJQUFJLEVBQUVqQixNQUFNLENBQUNrQixLQUFQLENBQWFELElBREM7QUFFcEJFLElBQUFBLElBQUksRUFBRW5CLE1BQU0sQ0FBQ2tCLEtBQVAsQ0FBYUMsSUFGQztBQUdwQkMsSUFBQUEsTUFBTSxFQUFFLDRCQUFVO0FBQUVILE1BQUFBLElBQUksRUFBRWpCLE1BQU0sQ0FBQ2tCLEtBQVAsQ0FBYUQsSUFBckI7QUFBMkJFLE1BQUFBLElBQUksRUFBRW5CLE1BQU0sQ0FBQ2tCLEtBQVAsQ0FBYUM7QUFBOUMsS0FBVixDQUhZO0FBSXBCRSxJQUFBQSxNQUFNLEVBQUUsTUFKWTtBQUtwQkMsSUFBQUEsR0FBRyxFQUFFO0FBTGUsR0FBZixDQUZEO0FBU05DLEVBQUFBLGlCQUFpQixFQUFFLElBVGI7QUFVTkMsRUFBQUEsTUFBTSxFQUFFO0FBVkYsQ0FBUixDQURGLEUsQ0FlQTs7QUFDQXBCLEdBQUcsQ0FBQ0ssR0FBSixDQUFRLEdBQVIsRUFBYVIsT0FBTyxDQUFDLGdCQUFELENBQXBCO0FBQ0FHLEdBQUcsQ0FBQ0ssR0FBSixDQUFRLE9BQVIsRUFBaUJSLE9BQU8sQ0FBQyxlQUFELENBQXhCO0FBQ0FHLEdBQUcsQ0FBQ0ssR0FBSixDQUFRLFdBQVIsRUFBcUJSLE9BQU8sQ0FBQyxtQkFBRCxDQUE1QixFLENBRUE7O0FBQ0FHLEdBQUcsQ0FBQ0ssR0FBSixDQUFRLFVBQVNnQixHQUFULEVBQWNDLEdBQWQsRUFBbUJDLElBQW5CLEVBQXlCO0FBQy9CQSxFQUFBQSxJQUFJLENBQUMseUJBQVksR0FBWixDQUFELENBQUo7QUFDRCxDQUZELEUsQ0FJQTs7QUFDQXZCLEdBQUcsQ0FBQ0ssR0FBSixDQUFRLFVBQ05tQixHQURNLEVBRU5ILEdBRk0sRUFHTkMsR0FITSxFQUlOQyxJQUpNLEVBS047QUFDQTtBQUNBRCxFQUFBQSxHQUFHLENBQUNHLE1BQUosQ0FBV0MsT0FBWCxHQUFxQkYsR0FBRyxDQUFDRSxPQUF6QjtBQUNBSixFQUFBQSxHQUFHLENBQUNHLE1BQUosQ0FBV0UsS0FBWCxHQUFtQk4sR0FBRyxDQUFDckIsR0FBSixDQUFRNEIsR0FBUixDQUFZLEtBQVosTUFBdUIsYUFBdkIsR0FBdUNKLEdBQXZDLEdBQTZDLEVBQWhFLENBSEEsQ0FLQTs7QUFDQUYsRUFBQUEsR0FBRyxDQUFDTyxNQUFKLENBQVdMLEdBQUcsQ0FBQ0ssTUFBSixJQUFjLEdBQXpCO0FBQ0FQLEVBQUFBLEdBQUcsQ0FBQ1EsTUFBSixDQUFXLE9BQVg7QUFDRCxDQWJEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbG9nLCBsb2dFLCBsb2dEIH0gZnJvbSAnLi9jb21tb25zL3V0aWwvbG9nZ2VyJztcbmltcG9ydCBjcmVhdGVFcnJvciBmcm9tICdodHRwLWVycm9ycyc7XG5pbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCBzZXNzaW9uIGZyb20gJ2V4cHJlc3Mtc2Vzc2lvbic7XG5pbXBvcnQgY29ubmVjdFJlZGlzIGZyb20gJ2Nvbm5lY3QtcmVkaXMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgY29va2llUGFyc2VyIGZyb20gJ2Nvb2tpZS1wYXJzZXInO1xuaW1wb3J0IGxvZ2dlciBmcm9tICdtb3JnYW4nO1xuaW1wb3J0IHsgRXhwcmVzc0Vycm9yIH0gZnJvbSAnLi4vc3JjL2ludGVyZmFjZXMvRXhwcmVzc0Vycm9yJztcbmltcG9ydCB7IGdldENsaWVudCB9IGZyb20gJy4vZHJpdmVycy9yZWRpcy9yZWRpc0NsaWVudCc7XG5jb25zdCBSZWRpc1N0b3JlID0gY29ubmVjdFJlZGlzKHNlc3Npb24pO1xuY29uc3QgY29uZmlnID0gcmVxdWlyZSgnY29uZmlnJyk7XG5jb25zdCBwID0gbG9nRChfX2ZpbGVuYW1lKSxcbiAgYXBwID0gZXhwcmVzcygpO1xuXG4vLyB2aWV3IGVuZ2luZSBzZXR1cFxuYXBwLnNldCgndmlld3MnLCBwYXRoLmpvaW4oX19kaXJuYW1lLCAndmlld3MnKSk7XG5hcHAuc2V0KCd2aWV3IGVuZ2luZScsICdlanMnKTtcblxuLy8gcGx1Z2luc1xuYXBwLnVzZShsb2dnZXIoJ2RldicpKTtcbmFwcC51c2UoZXhwcmVzcy5qc29uKCkpO1xuYXBwLnVzZShleHByZXNzLnVybGVuY29kZWQoeyBleHRlbmRlZDogZmFsc2UgfSkpO1xuYXBwLnVzZShjb29raWVQYXJzZXIoKSk7XG5hcHAudXNlKGV4cHJlc3Muc3RhdGljKHBhdGguam9pbihfX2Rpcm5hbWUsICdwdWJsaWMnKSkpO1xuYXBwLnVzZShcbiAgc2Vzc2lvbih7XG4gICAgc2VjcmV0OiAnc2VjcmV0a2V5JyxcbiAgICBzdG9yZTogbmV3IFJlZGlzU3RvcmUoe1xuICAgICAgaG9zdDogY29uZmlnLnJlZGlzLmhvc3QsXG4gICAgICBwb3J0OiBjb25maWcucmVkaXMucG9ydCxcbiAgICAgIGNsaWVudDogZ2V0Q2xpZW50KHsgaG9zdDogY29uZmlnLnJlZGlzLmhvc3QsIHBvcnQ6IGNvbmZpZy5yZWRpcy5wb3J0IH0pLFxuICAgICAgcHJlZml4OiAnc2lkOicsXG4gICAgICB0dGw6IDE4MDAsXG4gICAgfSksXG4gICAgc2F2ZVVuaW5pdGlhbGl6ZWQ6IHRydWUsXG4gICAgcmVzYXZlOiBmYWxzZSxcbiAgfSksXG4pO1xuXG4vLyByb3V0aW5nXG5hcHAudXNlKCcvJywgcmVxdWlyZSgnLi9yb3V0ZXMvaW5kZXgnKSk7XG5hcHAudXNlKCcvdXNlcicsIHJlcXVpcmUoJy4vcm91dGVzL3VzZXInKSk7XG5hcHAudXNlKCcvY2hhdHJvb20nLCByZXF1aXJlKCcuL3JvdXRlcy9jaGF0cm9vbScpKTtcblxuLy8gY2F0Y2ggNDA0IGFuZCBmb3J3YXJkIHRvIGVycm9yIGhhbmRsZXJcbmFwcC51c2UoZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgbmV4dChjcmVhdGVFcnJvcig0MDQpKTtcbn0pO1xuXG4vLyBlcnJvciBoYW5kbGVyXG5hcHAudXNlKGZ1bmN0aW9uKFxuICBlcnI6IEV4cHJlc3NFcnJvcixcbiAgcmVxOiBleHByZXNzLlJlcXVlc3QsXG4gIHJlczogZXhwcmVzcy5SZXNwb25zZSxcbiAgbmV4dDogZXhwcmVzcy5OZXh0RnVuY3Rpb24sXG4pIHtcbiAgLy8gc2V0IGxvY2Fscywgb25seSBwcm92aWRpbmcgZXJyb3IgaW4gZGV2ZWxvcG1lbnRcbiAgcmVzLmxvY2Fscy5tZXNzYWdlID0gZXJyLm1lc3NhZ2U7XG4gIHJlcy5sb2NhbHMuZXJyb3IgPSByZXEuYXBwLmdldCgnZW52JykgPT09ICdkZXZlbG9wbWVudCcgPyBlcnIgOiB7fTtcblxuICAvLyByZW5kZXIgdGhlIGVycm9yIHBhZ2VcbiAgcmVzLnN0YXR1cyhlcnIuc3RhdHVzIHx8IDUwMCk7XG4gIHJlcy5yZW5kZXIoJ2Vycm9yJyk7XG59KTtcblxuZXhwb3J0IHsgYXBwIH07XG4iXX0=