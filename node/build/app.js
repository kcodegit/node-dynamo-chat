"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.app = void 0;

var _logger = require("./commons/util/logger");

var _httpErrors = _interopRequireDefault(require("http-errors"));

var _express = _interopRequireDefault(require("express"));

var _expressSession = _interopRequireDefault(require("express-session"));

var _connectRedis = _interopRequireDefault(require("connect-redis"));

var _path = _interopRequireDefault(require("path"));

var _cookieParser = _interopRequireDefault(require("cookie-parser"));

var _morgan = _interopRequireDefault(require("morgan"));

var _redisClient = require("./drivers/redis/redisClient");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const RedisStore = (0, _connectRedis.default)(_expressSession.default);

const config = require('config');

const p = (0, _logger.logD)(__filename),
      app = (0, _express.default)(); // view engine setup

exports.app = app;
app.set('views', _path.default.join(__dirname, 'views'));
app.set('view engine', 'ejs'); // plugins

app.use((0, _morgan.default)('dev'));
app.use(_express.default.json());
app.use(_express.default.urlencoded({
  extended: false
}));
app.use((0, _cookieParser.default)());
app.use(_express.default.static(_path.default.join(__dirname, 'public')));
app.use((0, _expressSession.default)({
  secret: 'secretkey',
  store: new RedisStore({
    host: config.redis.host,
    port: config.redis.port,
    client: (0, _redisClient.getClient)({
      host: config.redis.host,
      port: config.redis.port
    }),
    prefix: 'sid:',
    ttl: 1800
  }),
  saveUninitialized: true
})); // routing

app.use('/', require('./routes/index'));
app.use('/user', require('./routes/user'));
app.use('/chatroom', require('./routes/chatroom')); // catch 404 and forward to error handler

app.use(function (req, res, next) {
  next((0, _httpErrors.default)(404));
}); // error handler

app.use(function (err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {}; // render the error page

  res.status(err.status || 500);
  res.render('error');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAudHMiXSwibmFtZXMiOlsiUmVkaXNTdG9yZSIsInNlc3Npb24iLCJjb25maWciLCJyZXF1aXJlIiwicCIsIl9fZmlsZW5hbWUiLCJhcHAiLCJzZXQiLCJwYXRoIiwiam9pbiIsIl9fZGlybmFtZSIsInVzZSIsImV4cHJlc3MiLCJqc29uIiwidXJsZW5jb2RlZCIsImV4dGVuZGVkIiwic3RhdGljIiwic2VjcmV0Iiwic3RvcmUiLCJob3N0IiwicmVkaXMiLCJwb3J0IiwiY2xpZW50IiwicHJlZml4IiwidHRsIiwic2F2ZVVuaW5pdGlhbGl6ZWQiLCJyZXEiLCJyZXMiLCJuZXh0IiwiZXJyIiwibG9jYWxzIiwibWVzc2FnZSIsImVycm9yIiwiZ2V0Iiwic3RhdHVzIiwicmVuZGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7Ozs7QUFDQSxNQUFNQSxVQUFVLEdBQUcsMkJBQWFDLHVCQUFiLENBQW5COztBQUNBLE1BQU1DLE1BQU0sR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBdEI7O0FBQ0EsTUFBTUMsQ0FBQyxHQUFHLGtCQUFLQyxVQUFMLENBQVY7QUFBQSxNQUNFQyxHQUFHLEdBQUcsdUJBRFIsQyxDQUdBOzs7QUFDQUEsR0FBRyxDQUFDQyxHQUFKLENBQVEsT0FBUixFQUFpQkMsY0FBS0MsSUFBTCxDQUFVQyxTQUFWLEVBQXFCLE9BQXJCLENBQWpCO0FBQ0FKLEdBQUcsQ0FBQ0MsR0FBSixDQUFRLGFBQVIsRUFBdUIsS0FBdkIsRSxDQUVBOztBQUNBRCxHQUFHLENBQUNLLEdBQUosQ0FBUSxxQkFBTyxLQUFQLENBQVI7QUFDQUwsR0FBRyxDQUFDSyxHQUFKLENBQVFDLGlCQUFRQyxJQUFSLEVBQVI7QUFDQVAsR0FBRyxDQUFDSyxHQUFKLENBQVFDLGlCQUFRRSxVQUFSLENBQW1CO0FBQUVDLEVBQUFBLFFBQVEsRUFBRTtBQUFaLENBQW5CLENBQVI7QUFDQVQsR0FBRyxDQUFDSyxHQUFKLENBQVEsNEJBQVI7QUFDQUwsR0FBRyxDQUFDSyxHQUFKLENBQVFDLGlCQUFRSSxNQUFSLENBQWVSLGNBQUtDLElBQUwsQ0FBVUMsU0FBVixFQUFxQixRQUFyQixDQUFmLENBQVI7QUFDQUosR0FBRyxDQUFDSyxHQUFKLENBQ0UsNkJBQVE7QUFDTk0sRUFBQUEsTUFBTSxFQUFFLFdBREY7QUFFTkMsRUFBQUEsS0FBSyxFQUFFLElBQUlsQixVQUFKLENBQWU7QUFDcEJtQixJQUFBQSxJQUFJLEVBQUVqQixNQUFNLENBQUNrQixLQUFQLENBQWFELElBREM7QUFFcEJFLElBQUFBLElBQUksRUFBRW5CLE1BQU0sQ0FBQ2tCLEtBQVAsQ0FBYUMsSUFGQztBQUdwQkMsSUFBQUEsTUFBTSxFQUFFLDRCQUFVO0FBQUVILE1BQUFBLElBQUksRUFBRWpCLE1BQU0sQ0FBQ2tCLEtBQVAsQ0FBYUQsSUFBckI7QUFBMkJFLE1BQUFBLElBQUksRUFBRW5CLE1BQU0sQ0FBQ2tCLEtBQVAsQ0FBYUM7QUFBOUMsS0FBVixDQUhZO0FBSXBCRSxJQUFBQSxNQUFNLEVBQUUsTUFKWTtBQUtwQkMsSUFBQUEsR0FBRyxFQUFFO0FBTGUsR0FBZixDQUZEO0FBU05DLEVBQUFBLGlCQUFpQixFQUFFO0FBVGIsQ0FBUixDQURGLEUsQ0FjQTs7QUFDQW5CLEdBQUcsQ0FBQ0ssR0FBSixDQUFRLEdBQVIsRUFBYVIsT0FBTyxDQUFDLGdCQUFELENBQXBCO0FBQ0FHLEdBQUcsQ0FBQ0ssR0FBSixDQUFRLE9BQVIsRUFBaUJSLE9BQU8sQ0FBQyxlQUFELENBQXhCO0FBQ0FHLEdBQUcsQ0FBQ0ssR0FBSixDQUFRLFdBQVIsRUFBcUJSLE9BQU8sQ0FBQyxtQkFBRCxDQUE1QixFLENBRUE7O0FBQ0FHLEdBQUcsQ0FBQ0ssR0FBSixDQUFRLFVBQVNlLEdBQVQsRUFBY0MsR0FBZCxFQUFtQkMsSUFBbkIsRUFBeUI7QUFDL0JBLEVBQUFBLElBQUksQ0FBQyx5QkFBWSxHQUFaLENBQUQsQ0FBSjtBQUNELENBRkQsRSxDQUlBOztBQUNBdEIsR0FBRyxDQUFDSyxHQUFKLENBQVEsVUFDTmtCLEdBRE0sRUFFTkgsR0FGTSxFQUdOQyxHQUhNLEVBSU5DLElBSk0sRUFLTjtBQUNBO0FBQ0FELEVBQUFBLEdBQUcsQ0FBQ0csTUFBSixDQUFXQyxPQUFYLEdBQXFCRixHQUFHLENBQUNFLE9BQXpCO0FBQ0FKLEVBQUFBLEdBQUcsQ0FBQ0csTUFBSixDQUFXRSxLQUFYLEdBQW1CTixHQUFHLENBQUNwQixHQUFKLENBQVEyQixHQUFSLENBQVksS0FBWixNQUF1QixhQUF2QixHQUF1Q0osR0FBdkMsR0FBNkMsRUFBaEUsQ0FIQSxDQUtBOztBQUNBRixFQUFBQSxHQUFHLENBQUNPLE1BQUosQ0FBV0wsR0FBRyxDQUFDSyxNQUFKLElBQWMsR0FBekI7QUFDQVAsRUFBQUEsR0FBRyxDQUFDUSxNQUFKLENBQVcsT0FBWDtBQUNELENBYkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsb2csIGxvZ0UsIGxvZ0QgfSBmcm9tICcuL2NvbW1vbnMvdXRpbC9sb2dnZXInO1xuaW1wb3J0IGNyZWF0ZUVycm9yIGZyb20gJ2h0dHAtZXJyb3JzJztcbmltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHNlc3Npb24gZnJvbSAnZXhwcmVzcy1zZXNzaW9uJztcbmltcG9ydCBjb25uZWN0UmVkaXMgZnJvbSAnY29ubmVjdC1yZWRpcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBjb29raWVQYXJzZXIgZnJvbSAnY29va2llLXBhcnNlcic7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJ21vcmdhbic7XG5pbXBvcnQgeyBFeHByZXNzRXJyb3IgfSBmcm9tICcuLi9zcmMvaW50ZXJmYWNlcy9FeHByZXNzRXJyb3InO1xuaW1wb3J0IHsgZ2V0Q2xpZW50IH0gZnJvbSAnLi9kcml2ZXJzL3JlZGlzL3JlZGlzQ2xpZW50JztcbmNvbnN0IFJlZGlzU3RvcmUgPSBjb25uZWN0UmVkaXMoc2Vzc2lvbik7XG5jb25zdCBjb25maWcgPSByZXF1aXJlKCdjb25maWcnKTtcbmNvbnN0IHAgPSBsb2dEKF9fZmlsZW5hbWUpLFxuICBhcHAgPSBleHByZXNzKCk7XG5cbi8vIHZpZXcgZW5naW5lIHNldHVwXG5hcHAuc2V0KCd2aWV3cycsIHBhdGguam9pbihfX2Rpcm5hbWUsICd2aWV3cycpKTtcbmFwcC5zZXQoJ3ZpZXcgZW5naW5lJywgJ2VqcycpO1xuXG4vLyBwbHVnaW5zXG5hcHAudXNlKGxvZ2dlcignZGV2JykpO1xuYXBwLnVzZShleHByZXNzLmpzb24oKSk7XG5hcHAudXNlKGV4cHJlc3MudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiBmYWxzZSB9KSk7XG5hcHAudXNlKGNvb2tpZVBhcnNlcigpKTtcbmFwcC51c2UoZXhwcmVzcy5zdGF0aWMocGF0aC5qb2luKF9fZGlybmFtZSwgJ3B1YmxpYycpKSk7XG5hcHAudXNlKFxuICBzZXNzaW9uKHtcbiAgICBzZWNyZXQ6ICdzZWNyZXRrZXknLFxuICAgIHN0b3JlOiBuZXcgUmVkaXNTdG9yZSh7XG4gICAgICBob3N0OiBjb25maWcucmVkaXMuaG9zdCxcbiAgICAgIHBvcnQ6IGNvbmZpZy5yZWRpcy5wb3J0LFxuICAgICAgY2xpZW50OiBnZXRDbGllbnQoeyBob3N0OiBjb25maWcucmVkaXMuaG9zdCwgcG9ydDogY29uZmlnLnJlZGlzLnBvcnQgfSksXG4gICAgICBwcmVmaXg6ICdzaWQ6JyxcbiAgICAgIHR0bDogMTgwMCxcbiAgICB9KSxcbiAgICBzYXZlVW5pbml0aWFsaXplZDogdHJ1ZSxcbiAgfSksXG4pO1xuXG4vLyByb3V0aW5nXG5hcHAudXNlKCcvJywgcmVxdWlyZSgnLi9yb3V0ZXMvaW5kZXgnKSk7XG5hcHAudXNlKCcvdXNlcicsIHJlcXVpcmUoJy4vcm91dGVzL3VzZXInKSk7XG5hcHAudXNlKCcvY2hhdHJvb20nLCByZXF1aXJlKCcuL3JvdXRlcy9jaGF0cm9vbScpKTtcblxuLy8gY2F0Y2ggNDA0IGFuZCBmb3J3YXJkIHRvIGVycm9yIGhhbmRsZXJcbmFwcC51c2UoZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgbmV4dChjcmVhdGVFcnJvcig0MDQpKTtcbn0pO1xuXG4vLyBlcnJvciBoYW5kbGVyXG5hcHAudXNlKGZ1bmN0aW9uKFxuICBlcnI6IEV4cHJlc3NFcnJvcixcbiAgcmVxOiBleHByZXNzLlJlcXVlc3QsXG4gIHJlczogZXhwcmVzcy5SZXNwb25zZSxcbiAgbmV4dDogZXhwcmVzcy5OZXh0RnVuY3Rpb24sXG4pIHtcbiAgLy8gc2V0IGxvY2Fscywgb25seSBwcm92aWRpbmcgZXJyb3IgaW4gZGV2ZWxvcG1lbnRcbiAgcmVzLmxvY2Fscy5tZXNzYWdlID0gZXJyLm1lc3NhZ2U7XG4gIHJlcy5sb2NhbHMuZXJyb3IgPSByZXEuYXBwLmdldCgnZW52JykgPT09ICdkZXZlbG9wbWVudCcgPyBlcnIgOiB7fTtcblxuICAvLyByZW5kZXIgdGhlIGVycm9yIHBhZ2VcbiAgcmVzLnN0YXR1cyhlcnIuc3RhdHVzIHx8IDUwMCk7XG4gIHJlcy5yZW5kZXIoJ2Vycm9yJyk7XG59KTtcblxuZXhwb3J0IHsgYXBwIH07XG4iXX0=