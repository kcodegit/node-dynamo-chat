"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DynamoError = exports.DynamoClient = void 0;

var _logger = require("../../commons/util/logger");

var _awsSdk = _interopRequireDefault(require("aws-sdk"));

var _amazonDaxClient = _interopRequireDefault(require("amazon-dax-client"));

var _dynamodb = require("aws-sdk/clients/dynamodb");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const p = (0, _logger.logD)(__filename);
if (process.env.NODE_ENV === 'development') _awsSdk.default.config.logger = console;
/**
 * DynamoDB access client.
 * Using DocumentClient.
 */

class DynamoClient {
  // public for test

  /**
   * @param config aws config
   */
  constructor(config, dax) {
    _defineProperty(this, "db", void 0);

    _awsSdk.default.config.update(config);

    this.db = dax ? new _dynamodb.DocumentClient({
      service: new _amazonDaxClient.default({
        endpoints: dax.endpoints,
        region: dax.region
      })
    }) : new _dynamodb.DocumentClient();
  }
  /**
   * Put a single object.
   * @param params
   * @returns
   */


  async putItemSync(params) {
    try {
      return await this.db.put(params).promise();
    } catch (error) {
      throw new DynamoError(error);
    }
  }
  /**
   * Put a single object.
   * @param params
   * @param cb
   * @returns
   */


  putItem(params, cb) {
    this.db.put(params, (e, data) => {
      e ? cb(new DynamoError(e)) : cb(undefined, data);
    });
  }
  /**
   * Update a single object.
   * @param params
   * @returns
   */


  async updateItemSync(params) {
    try {
      return await this.db.update(params).promise();
    } catch (error) {
      throw new DynamoError(error);
    }
  }
  /**
   * Update a single object.
   * @param params
   * @param cb
   * @returns
   */


  updateItem(params, cb) {
    this.db.update(params, (e, data) => {
      e ? cb(new DynamoError(e)) : cb(undefined, data);
    });
  }
  /**
   * Get by the key.
   * @param params
   * @returns
   */


  async getItemSync(params) {
    try {
      const data = await this.db.get(params).promise();
      return data.Item;
    } catch (error) {
      throw new DynamoError(error);
    }
  }
  /**
   * Get by the key.
   * @param params
   * @param cb
   * @returns
   */


  getItem(params, cb) {
    this.db.get(params, (e, data) => {
      e ? cb(new DynamoError(e)) : cb(undefined, data.Item);
    });
  }
  /**
   * Run query.
   * @param params
   * @returns
   */


  async queryTableSync(params) {
    try {
      const data = await this.db.query(params).promise();
      return data.Items;
    } catch (error) {
      throw new DynamoError(error);
    }
  }
  /**
   * Run query.
   * @param params
   * @param
   * @returns
   */


  queryTable(params, cb) {
    this.db.query(params, (e, data) => {
      e ? cb(new DynamoError(e)) : cb(undefined, data.Items);
    });
  }
  /**
   * Run scan.
   * @param params
   * @returns
   */


  async scanTableSync(params) {
    try {
      const data = await this.db.scan(params).promise();
      return data.Items;
    } catch (error) {
      throw new DynamoError(error);
    }
  }
  /**
   * Run scan.
   * @param params
   * @param
   * @returns
   */


  scanTable(params, cb) {
    this.db.scan(params, (e, data) => {
      e ? cb(new DynamoError(e)) : cb(undefined, data.Items);
    });
  }
  /**
   * Delete a single object.
   * @param params
   * @returns
   */


  async deleteItemSync(params) {
    try {
      return await this.db.delete(params).promise();
    } catch (error) {
      throw new DynamoError(error);
    }
  }
  /**
   * Delete a single object.
   * @param params
   * @param cb
   * @returns
   */


  deleteItem(params, cb) {
    this.db.delete(params, (e, data) => {
      e ? cb(new DynamoError(e)) : cb(undefined, data);
    });
  }

}
/**
 * Module error class.
 */


exports.DynamoClient = DynamoClient;

class DynamoError extends Error {
  /**
   * @param error_object
   */
  constructor(error_object) {
    super(error_object.message);

    _defineProperty(this, "statusCode", void 0);

    this.message = error_object.message;
    this.statusCode = 500;
  }

}

exports.DynamoError = DynamoError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,